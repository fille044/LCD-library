
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009cf  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072a  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b9  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000157  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  8e:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <send_it>:
#include <string.h>
#include <avr/io.h>
#include <util/delay.h>

void send_it(void) {
	ENABLE;
  96:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 ec       	ldi	r24, 0xC7	; 199
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <send_it+0x6>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <send_it+0xc>
  a2:	00 00       	nop
	_delay_us(500);
	DISABLE;
  a4:	2a 98       	cbi	0x05, 2	; 5
  a6:	87 ec       	ldi	r24, 0xC7	; 199
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <send_it+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <send_it+0x1a>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <print>:
	_delay_us(500);
}

void print(char *input) {
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	RS_SIGN;	
  bc:	29 9a       	sbi	0x05, 1	; 5
	int a = strlen(input); 
  be:	fc 01       	movw	r30, r24
  c0:	01 90       	ld	r0, Z+
  c2:	00 20       	and	r0, r0
  c4:	e9 f7       	brne	.-6      	; 0xc0 <print+0xc>
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	e8 1b       	sub	r30, r24
  ca:	f9 0b       	sbc	r31, r25
	for (int ix = 0; ix < a; ix++){
  cc:	1e 16       	cp	r1, r30
  ce:	1f 06       	cpc	r1, r31
  d0:	5c f4       	brge	.+22     	; 0xe8 <print+0x34>
  d2:	ec 01       	movw	r28, r24
  d4:	8c 01       	movw	r16, r24
  d6:	0e 0f       	add	r16, r30
  d8:	1f 1f       	adc	r17, r31
		PORTD = input[ix];
  da:	99 91       	ld	r25, Y+
  dc:	9b b9       	out	0x0b, r25	; 11
		send_it();
  de:	0e 94 4b 00 	call	0x96	; 0x96 <send_it>
}

void print(char *input) {
	RS_SIGN;	
	int a = strlen(input); 
	for (int ix = 0; ix < a; ix++){
  e2:	c0 17       	cp	r28, r16
  e4:	d1 07       	cpc	r29, r17
  e6:	c9 f7       	brne	.-14     	; 0xda <print+0x26>
		PORTD = input[ix];
		send_it();
	}
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	08 95       	ret

000000f2 <clear>:

void clear(void) {
	RS_INSTR;
  f2:	29 98       	cbi	0x05, 1	; 5
	//Clear screen
	PORTD = 0x01;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	8b b9       	out	0x0b, r24	; 11
	send_it();
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <send_it>
  fc:	08 95       	ret

000000fe <init>:
}

void init(void) {
	DDRD = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 102:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e1       	ldi	r24, 0x1F	; 31
 106:	9e e4       	ldi	r25, 0x4E	; 78
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <init+0xa>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <init+0x10>
 10e:	00 00       	nop
	_delay_ms(50);
	RS_INSTR;
 110:	29 98       	cbi	0x05, 1	; 5
	DISABLE;
 112:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	87 ec       	ldi	r24, 0xC7	; 199
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <init+0x1a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <init+0x20>
 11e:	00 00       	nop
	_delay_us(500);
	// Set 2 rows
	PORTD = 0b00111100;
 120:	8c e3       	ldi	r24, 0x3C	; 60
 122:	8b b9       	out	0x0b, r24	; 11
	send_it();
 124:	0e 94 4b 00 	call	0x96	; 0x96 <send_it>
	// Turn on screen
	PORTD = 0x0C;
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	8b b9       	out	0x0b, r24	; 11
	send_it();
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <send_it>
	//Clear screen
	clear();
 130:	0e 94 79 00 	call	0xf2	; 0xf2 <clear>
 134:	08 95       	ret

00000136 <set_cursor>:
}

void set_cursor(int a, int b) {
	RS_INSTR;
 136:	29 98       	cbi	0x05, 1	; 5
	if (a==1){
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	91 05       	cpc	r25, r1
 13c:	29 f4       	brne	.+10     	; 0x148 <set_cursor+0x12>
		PORTD = 0x80 + b;
 13e:	60 58       	subi	r22, 0x80	; 128
 140:	6b b9       	out	0x0b, r22	; 11
		send_it();
 142:	0e 94 4b 00 	call	0x96	; 0x96 <send_it>
 146:	08 95       	ret
	}
	else if (a==2){
 148:	02 97       	sbiw	r24, 0x02	; 2
 14a:	21 f4       	brne	.+8      	; 0x154 <set_cursor+0x1e>
		PORTD = 0xC0 + b;
 14c:	60 54       	subi	r22, 0x40	; 64
 14e:	6b b9       	out	0x0b, r22	; 11
		send_it();
 150:	0e 94 4b 00 	call	0x96	; 0x96 <send_it>
 154:	08 95       	ret

00000156 <main>:
	}
}
	
int main(void) {
	init();
 156:	0e 94 7f 00 	call	0xfe	; 0xfe <init>
    while (1) {	
		set_cursor(1,0);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 9b 00 	call	0x136	; 0x136 <set_cursor>
		print("Hello");
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 5a 00 	call	0xb4	; 0xb4 <print>
		set_cursor(2, 8);
 16e:	68 e0       	ldi	r22, 0x08	; 8
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 9b 00 	call	0x136	; 0x136 <set_cursor>
		print("success");
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 5a 00 	call	0xb4	; 0xb4 <print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	80 e7       	ldi	r24, 0x70	; 112
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x32>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x3c>
 192:	00 00       	nop
		_delay_ms(500);
		clear();
 194:	0e 94 79 00 	call	0xf2	; 0xf2 <clear>
	}
 198:	e0 cf       	rjmp	.-64     	; 0x15a <main+0x4>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
